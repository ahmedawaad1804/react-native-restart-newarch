name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  merge_group:
    types: [checks_requested]

jobs:
  # 🧹 Lint & typecheck
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup

      - name: Lint files
        run: yarn lint

      - name: Typecheck files
        run: yarn typecheck

  # 🧪 Unit tests
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup

      - name: Run unit tests
        run: yarn test --maxWorkers=2 --coverage

  # 📦 Build library itself
  build-library:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup

      - name: Build package
        run: yarn prepare

  # 🤖 Android build for example app
  build-android:
    runs-on: ubuntu-latest
    env:
      TURBO_CACHE_DIR: .turbo/android
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup

      # Cache turbo tasks
      - uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turborepo-android-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turborepo-android-

      # ✅ safer Node parser for Turborepo dry run
      - name: Check turborepo cache for Android
        id: turbo-android
        run: |
          set +e
          STATUS=$(yarn turbo run build:android --cache-dir="${{ env.TURBO_CACHE_DIR }}" --dry=json \
            | node -e "const fs=require('fs'); const d=JSON.parse(fs.readFileSync(0,'utf8')); const t=d.tasks?.find(x=>x.task==='build:android'); console.log(t?.cache?.status||'MISS');")
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "Turbo cache status: $STATUS"

      # JDK & SDK setup (only if cache miss)
      - name: Setup Java
        if: steps.turbo-android.outputs.status != 'HIT'
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Android SDK
        if: steps.turbo-android.outputs.status != 'HIT'
        uses: android-actions/setup-android@v3

      - name: Accept Android licenses
        if: steps.turbo-android.outputs.status != 'HIT'
        run: yes | sdkmanager --licenses

      # Cache Gradle
      - uses: actions/cache@v4
        if: steps.turbo-android.outputs.status != 'HIT'
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('example/android/gradle/wrapper/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Create local.properties (needed for SDK path)
      - name: Create local.properties
        if: steps.turbo-android.outputs.status != 'HIT'
        run: echo "sdk.dir=$ANDROID_HOME" > example/android/local.properties

      - name: Build Android example
        run: yarn turbo run build:android --cache-dir="${{ env.TURBO_CACHE_DIR }}"

  # 🍎 iOS build for example app
  build-ios:
    runs-on: macos-latest
    env:
      TURBO_CACHE_DIR: .turbo/ios
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup
        uses: ./.github/actions/setup

      - name: Cache turborepo for iOS
        uses: actions/cache@v4
        with:
          path: ${{ env.TURBO_CACHE_DIR }}
          key: ${{ runner.os }}-turborepo-ios-${{ hashFiles('yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turborepo-ios-

      - name: Check turborepo cache for iOS
        run: |
          TURBO_CACHE_STATUS=$(node -p "($(yarn turbo run build:ios --cache-dir="${{ env.TURBO_CACHE_DIR }}" --dry=json)).tasks.find(t => t.task === 'build:ios').cache.status")

          if [[ $TURBO_CACHE_STATUS == "HIT" ]]; then
            echo "turbo_cache_hit=1" >> $GITHUB_ENV
          fi

      - name: Restore cocoapods
        if: env.turbo_cache_hit != 1
        id: cocoapods-cache
        uses: actions/cache/restore@v4
        with:
          path: |
            **/ios/Pods
          key: ${{ runner.os }}-cocoapods-${{ hashFiles('example/ios/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-cocoapods-

      - name: Install cocoapods
        if: env.turbo_cache_hit != 1 && steps.cocoapods-cache.outputs.cache-hit != 'true'
        run: |
          cd example/ios
          pod install
        env:
          NO_FLIPPER: 1

      - name: Cache cocoapods
        if: env.turbo_cache_hit != 1 && steps.cocoapods-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: |
            **/ios/Pods
          key: ${{ steps.cocoapods-cache.outputs.cache-key }}

      - name: Build example for iOS
        run: |
          yarn turbo run build:ios --cache-dir="${{ env.TURBO_CACHE_DIR }}"
